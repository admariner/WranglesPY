{"$schema": "http://json-schema.org/draft-07/schema#", "title": "Wrangles Pipeline Recipes", "description": "Recipes for executing automated Wrangling pipelines", "type": "object", "additionalProperties": false, "properties": {"execute": {"type": "object", "description": "Run actions before or after wrangling, or on failure", "minProperties": 1, "properties": {"on_start": {"type": "array", "description": "Execute actions before the pipeline starts", "minItems": 1, "items": {"$ref": "#/$defs/actions"}}, "on_success": {"type": "array", "description": "Execute actions if the pipeline succeeds", "minItems": 1, "items": {"$ref": "#/$defs/actions"}}, "on_failure": {"type": "array", "description": "Execute actions if the pipeline fails", "minItems": 1, "items": {"$ref": "#/$defs/actions"}}}}, "read": {"type": "array", "description": "Read data from a variety of sources", "minItems": 1, "maxItems": 1, "items": {"$ref": "#/$defs/sources/read"}}, "wrangles": {"type": "array", "description": "A list of wrangles to apply", "minItems": 1, "items": {"type": "object", "properties": {"classify": {"type": "object", "description": "Run classify wrangles on the specified columns", "additionalProperties": false, "required": ["input", "output", "model_id"], "properties": {"input": {"type": ["string", "array"], "description": "Name of the input column."}, "output": {"type": ["string", "array"], "description": "Name of the output column."}, "model_id": {"type": "string", "description": "ID of the classification model to be used"}}}, "convert.case": {"type": "object", "description": "Change the case of the input", "additionalProperties": false, "required": ["input", "case"], "properties": {"input": {"type": ["string", "array"], "description": "Name or list of input columns"}, "output": {"type": ["string", "array"], "description": "Name or list of output columns"}, "case": {"type": "string", "description": "The case to convert to. lower, upper, title or sentence", "enum": ["lower", "upper", "title", "sentence"]}}}, "convert.data_type": {"type": "object", "description": "Change the data type of the input", "additionalProperties": false, "required": ["input", "data_type"], "properties": {"input": {"type": ["string", "array"], "description": "Name or list of input columns"}, "output": {"type": ["string", "array"], "description": "Name or list of output columns"}, "data_type": {"type": "string", "description": "The new data type", "enum": ["str", "float", "int", "bool"]}}}, "convert.to_json": {"type": "object", "description": "Convert an object to a JSON representation", "additionalProperties": false, "required": ["input"], "properties": {"input": {"type": "string", "description": "Name of the input column."}, "output": {"type": "string", "description": "Name of the output column. If omitted, the input column will be overwritten"}}}, "create.column": {"type": "object", "description": "Create column(s) with a user defined value. Defaults to None (empty).", "additionalProperties": false, "required": ["output"], "properties": {"output": {"type": ["string", "array"], "description": "Name or list of names of new columns"}, "value": {"type": "string", "description": "(Optional) Value to add in the new column(s). If omitted, defaults to None."}}}, "create.guid": {"type": "object", "description": "Create column(s) with a GUID", "additionalProperties": false, "required": ["output"], "properties": {"output": {"type": ["string", "array"], "description": "Name or list of names of new columns"}}}, "create.index": {"type": "object", "description": "Create column(s) with an incremental index.", "additionalProperties": false, "required": ["output"], "properties": {"output": {"type": ["string", "array"], "description": "Name or list of names of new columns"}, "start": {"type": "integer", "description": "(Optional; default 1) Starting number for the index"}, "step": {"type": "integer", "description": "(Optional; default 1) Step between successive rows"}}}, "create.uuid": {"type": "object", "description": "Create column(s) with a UUID", "additionalProperties": false, "required": ["output"], "properties": {"output": {"type": ["string", "array"], "description": "Name or list of names of new columns"}}}, "extract.address": {"type": "object", "description": "Extract parts of addresses", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "string", "description": "Name of the input column."}, "output": {"type": "string", "description": "Name of the output column."}}}, "extract.attributes": {"type": "object", "description": "Extract numeric attributes from the input such as weights or lengths", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "string", "description": "Name of the input column."}, "output": {"type": "string", "description": "Name of the output column."}, "attribute_type": {"type": "string", "description": "Request only a specific type of attribute"}, "responseContent": {"type": "string", "description": "span - returns the text found. object - returns an object with the value and unit", "enum": ["span", "object"]}}}, "extract.codes": {"type": "object", "description": "Extract alphanumeric codes from the input", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": ["string", "array"], "description": "Name or list of input columns."}, "output": {"type": ["string", "array"], "description": "Name or list of output columns"}}}, "extract.custom": {"type": "object", "description": "Extract data from the input using a DIY or bespoke extraction wrangle", "additionalProperties": false, "required": ["input", "output", "model_id"], "properties": {"input": {"type": ["string", "array"], "description": "Name or list of input columns."}, "output": {"type": ["string", "array"], "description": "Name or list of output columns"}, "model_id": {"type": "string", "description": "The ID of the wrangle to use"}}}, "extract.properties": {"type": "object", "description": "Extract text properties from the input", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "string", "description": "Name of the input column"}, "output": {"type": "string", "description": "Name of the output columns"}, "property_type": {"type": "string", "description": "The specific type of properties to extract"}}}, "filter": {"type": "object", "description": "Filter the dataframe based on the contents", "additionalProperties": false, "required": ["input", "equal"], "properties": {"input": {"type": "string", "description": "Name of the column to filter on"}, "equal": {"type": ["string", "array"], "description": "Value or list of values to filter to"}}}, "format.trim": {"type": "object", "description": "Remove excess whitespace at the start and end of text", "additionalProperties": false, "required": ["input"], "properties": {"input": {"type": ["array", "string"], "description": "Name of the input column"}, "output": {"type": ["array", "string"], "description": "Name of the output column"}}}, "log": {"type": "object", "description": "Log the current status of the dataframe", "additionalProperties": false, "required": ["columns"], "properties": {"columns": {"type": "array", "description": "(Optional, default all columns) List of specific columns to log."}}}, "merge.coalesce": {"type": "object", "description": "Take the first non-empty value from a series of columns", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "array", "description": "List of input columns"}, "output": {"type": "string", "description": "Name of the output columns"}}}, "merge.concatenate": {"type": "object", "description": "Concatenate a list of columns or a list within a single column", "additionalProperties": false, "required": ["input", "output", "char"], "properties": {"input": {"type": ["array", "string"], "description": "Either a single column name or list of columns"}, "output": {"type": "string", "description": "Name of the output column"}, "char": {"type": "string", "description": "(Optional) Character to add between successive values"}}}, "merge.key_value_pairs": {"type": "object", "description": "Create a dictionary from keys and values in paired columns e.g. COLUMN_NAME_1, COLUMN_VALUE_1, COLUMN_NAME_2, COLUMN_VALUE_2 ...", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "object", "description": "Matched pairs of key and value columns"}, "output": {"type": "string", "description": "Name of the output column"}}}, "merge.lists": {"type": "object", "description": "Take lists in multiple columns and merge them to a single list", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "array", "description": "List of input columns"}, "output": {"type": "string", "description": "Name of the output column"}, "remove_duplicates": {"type": "boolean", "description": "Whether to remove duplicates from the created list"}}}, "merge.to_dict": {"type": "object", "description": "Take multiple columns and merge them to a dictionary (aka object) using the column headers as keys", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "array", "description": "List of input columns"}, "output": {"type": "string", "description": "Name of the output column"}, "include_empty": {"type": "boolean", "description": "Whether to include empty columns in the created dictionary"}}}, "merge.to_list": {"type": "object", "description": "Take multiple columns and merge them to a list", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "array", "description": "List of input columns"}, "output": {"type": "string", "description": "Name of the output column"}, "include_empty": {"type": "boolean", "description": "Whether to include empty columns in the created list"}}}, "rename": {"type": "object", "description": "Rename a column or list of columns", "properties": {"input": {"type": ["array", "string"], "description": "Name or list of input columns."}, "output": {"type": ["array", "string"], "description": "Name or list of output columns."}}}, "select.dictionary_element": {"type": "object", "description": "Select a named element of a dictionary", "additionalProperties": false, "required": ["input", "output", "element"], "properties": {"input": {"type": "string", "description": "Name of the input column"}, "output": {"type": "string", "description": "Name of the output column"}, "element": {"type": "string", "description": "The key from the dictionary to select."}}}, "select.highest_confidence": {"type": "object", "description": "Select the option with the highest confidence from multiple columns. Inputs are expected to be of the form [<<value>>, <<confidence_score>>]", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "array", "description": "List of the input columns to select from"}, "output": {"type": ["array", "string"], "description": "If two columns; the result and confidence. If one column; [result, confidence]"}}}, "select.list_element": {"type": "object", "description": "Select a numbered element of a list (zero indexed)", "additionalProperties": false, "required": ["input", "output", "element"], "properties": {"input": {"type": "string", "description": "Name of the input column"}, "output": {"type": "string", "description": "Name of the output column"}, "element": {"type": "integer", "description": "The numbered element of the list to select. Starts from zero"}}}, "select.threshold": {"type": "object", "description": "Select the first option if it exceeds a given threshold, else the second option", "additionalProperties": false, "required": ["input", "output", "threshold"], "properties": {"input": {"type": "array", "description": "List of the input columns to select from"}, "output": {"type": "string", "description": "Name of the output column"}, "threshold": {"type": "number", "description": "Threshold above which to choose the first option, otherwise the second", "minimum": 0, "maximum": 1}}}, "split.from_dict": {"type": "object", "description": "Split a dictionary into columns. The dictionary keys will be used as the new column headers.", "additionalProperties": false, "required": ["input"], "properties": {"input": {"type": "string", "description": "Name of the column to be split"}}}, "split.from_list": {"type": "object", "description": "Split a list in a single column to multiple columns", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "string", "description": "Name of the column to be split"}, "output": {"type": ["string", "array"], "description": "Name of column(s) for the results. If providing a single column, use a wildcard (*) to indicate a incrementing integer"}}}, "split.from_text": {"type": "object", "description": "Split a string to multiple columns or a list.", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "string", "description": "Name of the column to be split"}, "output": {"type": ["string", "array"], "description": "Name of the output column"}, "char": {"type": "string", "description": "(Optional) Set the character(s) to split on. Default comma (,)"}, "pad": {"type": "boolean", "description": "(Optional) If outputting to a list, choose whether to pad to a consistent length. Default False"}}}, "split.re_from_text": {"type": "object", "description": "Split a string to multiple columns or a list.", "additionalProperties": false, "required": ["input", "output"], "properties": {"input": {"type": "string", "description": "Name of the column to be split"}, "output": {"type": ["string", "array"], "description": "Name of the output column"}, "char": {"type": "string", "description": "(Optional) Set the characters to split on e.g. ',|\\.|- . Default comma (,)."}, "pad": {"type": "boolean", "description": "(Optional) If outputting to a list, choose whether to pad to a consistent length. Default False"}}}, "standardize": {"type": "object", "description": "Standardize data using a DIY or bespoke standardization wrangle", "additionalProperties": false, "required": ["input", "output", "model_id"], "properties": {"input": {"type": ["string", "array"], "description": "Name or list of input columns."}, "output": {"type": ["string", "array"], "description": "Name or list of output columns"}, "model_id": {"type": ["string", "array"], "description": "The ID of the wrangle to use"}}}, "translate": {"type": "object", "description": "Translate the input to a different language", "additionalProperties": false, "required": ["input", "output", "target_language"], "properties": {"input": {"type": "string", "description": "Name of the column to translate"}, "output": {"type": "string", "description": "Name of the output column"}, "target_language": {"type": "string", "description": "Code of the language to translate to"}, "source_language": {"type": "string", "description": "Code of the language to translate from. If omitted, automatically detects the input language"}}}}}}, "write": {"type": "array", "description": "Export your wrangled data", "minItems": 1, "items": {"type": "object", "properties": {"file": {"type": "object", "description": "Export data to a file", "required": ["name"], "properties": {"name": {"type": "string", "description": "The name of the file to write.", "pattern": "^.*(\\.json|\\.jsonl|\\.csv|\\.txt|\\.xlsx|\\.xlsm|\\.xls)(\\.gz)?$"}, "fields": {"type": "array", "description": "A list of the fields to write. If omitted, all fields will be written."}, "orient": {"type": "string", "description": "Used for JSON files. Specifies the output arrangement", "enum": ["split", "records", "index", "columns", "values"]}}}, "mssql": {"type": "object", "description": "Write data to a Microsoft SQL Server", "required": ["host", "user", "password", "database", "table"], "properties": {"host": {"type": "string", "description": "Hostname or IP address of the server"}, "user": {"type": "string", "description": "The user to connect to the database with"}, "password": {"type": "string", "description": "Password for the specified user"}, "database": {"type": "string", "description": "The database to connect to"}, "table": {"type": "string", "description": "The name of the table to insert the data into"}, "port": {"type": "integer", "description": "The Port to connect to. Defaults to 1433."}, "fields": {"type": "array", "description": "A list of the columns to write to the table. If omitted, all columns will be written."}}}, "postgres": {"type": "object", "description": "Write data to a PostgreSQL Server", "required": ["host", "user", "password", "database", "table"], "properties": {"host": {"type": "string", "description": "Hostname or IP address of the server"}, "user": {"type": "string", "description": "The user to connect to the database with"}, "password": {"type": "string", "description": "Password for the specified user"}, "database": {"type": "string", "description": "The database to connect to"}, "table": {"type": "string", "description": "The name of the table to insert the data into"}, "port": {"type": "integer", "description": "The Port to connect to. Defaults to 5432."}, "fields": {"type": "array", "description": "A list of the columns to write to the table. If omitted, all columns will be written."}}}, "pricefx": {"type": "object", "description": "Write data to a PriceFx instance. The names of the columns must match to the names within PriceFx.", "required": ["host", "partition", "target", "user", "password", "columns"], "properties": {"host": {"type": "string", "description": "Hostname e.g. example.pricefx.com"}, "partition": {"type": "string", "description": "Partition"}, "user": {"type": "string", "description": "The user to connect as"}, "password": {"type": "string", "description": "Password for the specified user"}, "target": {"type": "string", "description": "Target data set", "enum": ["Products", "Product Extensions", "Customers", "Customer Extensions"]}, "columns": {"type": "array", "description": "A list of the columns to write to the table."}}}, "dataframe": {"type": "object", "description": "Define the dataframe that is returned from the pipeline.run() function", "required": ["fields"], "properties": {"fields": {"type": "array", "description": "List of columns to include in the returned dataframe"}, "excluded_columns": {"type": "array", "description": "List of columns to exclude from the returned dataframe"}}}}}}}, "$defs": {"sources": {"read": {"type": "object", "description": "Define import sources", "maxProperties": 1, "additionProperties": false, "properties": {"file": {"type": "object", "description": "Import a file", "required": ["name"], "properties": {"name": {"type": "string", "description": "The name of the file to import", "pattern": "^.*(\\.json|\\.jsonl|\\.csv|\\.txt|\\.xlsx|\\.xlsm|\\.xls)(\\.gz)?$"}, "fields": {"type": "array", "description": "Columns to select"}, "nrows": {"type": "integer", "description": "Number of rows to read", "minimum": 1}, "header": {"type": "integer", "description": "Set the header row number.", "minimum": 0}, "sheet_name": {"type": "string", "description": "Used for Excel files. Specify the sheet to read."}, "orient": {"type": "string", "description": "Used for JSON files. Specifies the input arrangement", "enum": ["split", "records", "index", "columns", "values"]}}}, "mssql": {"type": "object", "description": "Import data from a Microsoft SQL Server", "required": ["host", "user", "password", "command"], "properties": {"host": {"type": "string", "description": "Hostname or IP address of the server"}, "user": {"type": "string", "description": "The user to connect to the database with"}, "password": {"type": "string", "description": "Password for the specified user"}, "command": {"type": "string", "description": "Table name or SQL command to select data"}, "database": {"type": "string", "description": "The database to connect to"}, "port": {"type": "integer", "description": "The Port to connect to. Defaults to 1433."}, "fields": {"type": "array", "description": "A list with a subset of the fields to import. This is less efficient than specifying in the command."}}}, "postgres": {"type": "object", "description": "Import data from a PostgreSQL Server", "required": ["host", "user", "password", "command"], "properties": {"host": {"type": "string", "description": "Hostname or IP address of the server"}, "user": {"type": "string", "description": "The user to connect to the database with"}, "password": {"type": "string", "description": "Password for the specified user"}, "command": {"type": "string", "description": "Table name or SQL command to select data"}, "database": {"type": "string", "description": "The database to connect to"}, "port": {"type": "integer", "description": "The Port to connect to. Defaults to 5432."}, "fields": {"type": "array", "description": "A list with a subset of the fields to import. This is less efficient than specifying in the command."}}}, "join": {"type": "object", "description": "Join two data sources on key(s). Analogous to a join in SQL.", "required": ["how", "left_on", "right_on", "sources"], "properties": {"how": {"type": "string", "description": "Method of join", "enum": ["left", "right", "outer", "inner", "cross"]}, "left_on": {"type": ["string", "array"], "description": "Key(s) to join on from first source"}, "right_on": {"type": ["string", "array"], "description": "Key(s) to join on from second source"}, "sources": {"type": "array", "description": "Two data sources to be joined", "minItems": 2, "maxItems": 2, "items": {"$ref": "#/$defs/sources/read"}}}}, "concatenate": {"type": "object", "description": "Concatenate two data sets together. Analogous to a union in SQL.", "required": ["sources"], "properties": {"sources": {"type": "array", "description": "Two data sources to be joined", "minItems": 2, "items": {"$ref": "#/$defs/sources/read"}}, "axis": {"type": "integer", "description": "0 to stack vertically (default). 1 to stack horizontally."}}}}}, "write": {}}, "actions": {"type": "object", "description": "Execute actions", "maxProperties": 1, "additionProperties": false, "properties": {"notification": {"type": "object", "description": "Send a notification", "required": ["url", "title", "body"], "properties": {"url": {"type": "string", "description": "Apprise notification url. See https://github.com/caronc/apprise"}, "title": {"type": "string", "description": "The title of the notification"}, "body": {"type": "string", "description": "The body of the notification"}}}, "ssh": {"type": "object", "description": "Issue commands over SSH", "required": ["host", "user", "password", "command"], "properties": {"host": {"type": "string", "description": "Domain or IP of the host"}, "user": {"type": "string", "description": "The user to connect as"}, "password": {"type": "string", "description": "Password for the user"}, "command": {"type": "string", "description": "Command to send"}}}}}}}